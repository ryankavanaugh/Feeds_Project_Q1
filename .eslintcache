[{"/Users/ryankavanaugh/Desktop/FeedsSRProject/feeds_cs_project/src/Person/Person.js":"1","/Users/ryankavanaugh/Desktop/FeedsSRProject/feeds_cs_project/src/App.js":"2"},{"size":179,"mtime":1610472641790,"results":"3","hashOfConfig":"4"},{"size":5001,"mtime":1611713404500,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16y28wg",{"filePath":"8","messages":"9","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/ryankavanaugh/Desktop/FeedsSRProject/feeds_cs_project/src/Person/Person.js",[],"/Users/ryankavanaugh/Desktop/FeedsSRProject/feeds_cs_project/src/App.js",["11","12","13","14","15","16","17","18","19"],"import React, { Component, useState } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\nimport { Layout } from 'antd';\nimport 'react-activity-feed/dist/index.css';\nimport { StreamApp, NotificationDropdown, FlatFeed } from 'react-activity-feed';\nimport { connect } from 'getstream';\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst key = 'qaq9tzbfa59s'\nconst secret = '87hpnuzt45t9bac2t73u2thk2h8dzdt9w6tcyp7bzth9h5t7qnm6damrg97tfnnj'\nconst appID = '100501'\nlet stream = require('getstream');\nlet client = stream.connect(key, null, appID);\nlet userToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoicnlhbiJ9.Va9Thg7gl4GtW3z1Q18FsHxYL7P0rAbXJtzpQTAr4KQ'\n\nconst newFeed = client.feed('user', 'ryan', userToken);\n// console.log(newFeed);\nconst activity = newFeed.addActivity({\n  actor: 'ryan', \n  tweet: 'Hello world', \n  verb: 'tweet', \n})\n\n// next: interact with stream api (look at doing this inside life cycle hook or constructor)\n// Feed.activity\n// Check out life cycle hooks - always want to grab feed, so it can be stored as a value to manipulate, did component now??\n// Server side end points - Seetha\n\nclass App extends Component {\n// state = {\n// inputValue:''\n// };\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      postText: '',\n      postcount: '',\n      items: [],\n      token: ''\n    };\n  }\n\n  getToken(userName){\n    fetch(\"http://localhost:1801/feedstoken?req=\" + userName, {method: 'POST'})\n    .then(res => res.json())\n    .then(data => this.setState({token: data.payload}))\n    console.log(\"token:\" + this.state.token)\n  }\n\n  // life cycle hook, runs first or second\n  componentDidMount() {\n    this.getToken('ryan')\n    console.log(this.state.token)\n    // this.getToken()\n    // const key = 'qaq9tzbfa59s'\n    // // const secret = '87hpnuzt45t9bac2t73u2thk2h8dzdt9w6tcyp7bzth9h5t7qnm6damrg97tfnnj'\n    // const appID = '100501'\n    // let stream = require('getstream');\n    // let client = stream.connect(key, this.state.token, appID);\n    // // let userToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoicnlhbiJ9.Va9Thg7gl4GtW3z1Q18FsHxYL7P0rAbXJtzpQTAr4KQ'\n\n    // const feedHoller = client.feed('user', 'ryan', this.state.token);\n    \n  }\n\n  updateInputValue(newInputValue) {\n    this.setState({inputValue: newInputValue});\n    console.log(this.state.inputValue);\n  }\n\n\n\n  postMsg() {\n    this.getToken('ryan');\n    console.log(this.state.inputValue);\n    const key = 'qaq9tzbfa59s'\n    const appID = '100501'\n    // const client = connect(key, this.state.token, appID)\n    // const feed = client.feed(user, 'ryan', this.state.token)\n    this.addFeedActivites();\n    // addActivity\n    }\n\n    addFeedActivites() {\n      const key = 'qaq9tzbfa59s'\n      const Secret = '87hpnuzt45t9bac2t73u2thk2h8dzdt9w6tcyp7bzth9h5t7qnm6damrg97tfnnj'\n      const appID = '100501'\n      const userID = 'ryan'\n      let stream = require('getstream');\n  \n      // Instantiate a new Client (server side)\n      let client = stream.connect(key, 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidW5kZWZpbmVkIn0.Pw_RkXrzD7zXqsYixYYkQ7LqCefmvyyWRGm_3gsuSQ4', appID);\n      // Add activity\n      let activity = { actor: 2, verb: 'tweet', object: 1, foreign_id: 'tweet:1' };\n      let feed = client.feed('user', userID);\n      // activity = { actor: 'steve', verb: 'pin', object: 'Place:42' };\n      const add = feed.addActivity(activity)\n      // return feed\n    }\n\n  render() {\n    return (\n      <div className=\"App\"> \n      <Layout>\n      <Header><h1>Seetha & Ryan's Feeds Project</h1></Header>\n      <Layout>\n      <Sider style={{background:'white'}}>\n       <div id=\"sidebarContainer\"> \n       Toggle Between Feeds Here\n       </div>\n        </Sider>\n      <Layout>\n        <Content><h1>Our Feeds</h1></Content>\n        <div id=\"postContainer\">\n        <br></br>\n        <div></div>\n        {/* Here: this onChange function is listening for specific events, e means events */}\n        <textarea onChange={e => this.updateInputValue(e.target.value)}></textarea>\n        <div></div>\n        <br></br>\n        <button onClick={() => this.postMsg()}>\n        Post\n        </button>\n        </div>\n        <Footer>        \n          <div id=\"container\">\n            <br></br>\n\n          Personal Timeline & Global Feed\n          \n          {/* APP */}\n            <StreamApp\n              apiKey=\"qaq9tzbfa59s\"\n              appId=\"100501\"\n              // token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoicnlhbiJ9.Va9Thg7gl4GtW3z1Q18FsHxYL7P0rAbXJtzpQTAr4KQ' \n              token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoidW5kZWZpbmVkIn0.Pw_RkXrzD7zXqsYixYYkQ7LqCefmvyyWRGm_3gsuSQ4\"\n            >\n              <NotificationDropdown notify/>\n              <FlatFeed\n                notify\n              />\n            </StreamApp> \n        {/* APP */}\n        \n        </div></Footer>\n      </Layout>\n    </Layout>\n    </Layout>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":1,"column":28,"nodeType":"22","messageId":"23","endLine":1,"endColumn":36},{"ruleId":"20","severity":1,"message":"24","line":3,"column":8,"nodeType":"22","messageId":"23","endLine":3,"endColumn":14},{"ruleId":"20","severity":1,"message":"25","line":7,"column":10,"nodeType":"22","messageId":"23","endLine":7,"endColumn":17},{"ruleId":"20","severity":1,"message":"26","line":12,"column":7,"nodeType":"22","messageId":"23","endLine":12,"endColumn":13},{"ruleId":"20","severity":1,"message":"27","line":20,"column":7,"nodeType":"22","messageId":"23","endLine":20,"endColumn":15},{"ruleId":"20","severity":1,"message":"28","line":79,"column":11,"nodeType":"22","messageId":"23","endLine":79,"endColumn":14},{"ruleId":"20","severity":1,"message":"29","line":80,"column":11,"nodeType":"22","messageId":"23","endLine":80,"endColumn":16},{"ruleId":"20","severity":1,"message":"30","line":89,"column":13,"nodeType":"22","messageId":"23","endLine":89,"endColumn":19},{"ruleId":"20","severity":1,"message":"31","line":100,"column":13,"nodeType":"22","messageId":"23","endLine":100,"endColumn":16},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Person' is defined but never used.","'connect' is defined but never used.","'secret' is assigned a value but never used.","'activity' is assigned a value but never used.","'key' is assigned a value but never used.","'appID' is assigned a value but never used.","'Secret' is assigned a value but never used.","'add' is assigned a value but never used."]